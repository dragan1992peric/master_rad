@inject IProductService ProductService
@implements IDisposable

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                <a href="/product/@product.Id">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                        }
                        else if(product.Image.Count > 0)
                        {
                            <img class="media-img" src="@product.Image[0].Data" alt="@product.Title" />
                        }
                    </a>
            </div>
            <div class="media-body">
                <a href="/product/@product.Id">
                    <h4 class="mb-0">@product.Title</h4>
                </a>
                <p>@product.Description</p>
                <h5 class="price">
                   @GetPriceText(product)
                </h5>
            </div>
        </li>
    }
    </ul>

    <select @onchange="HandleSelectChange">
        <option selected value="5">5</option>
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="20">20</option>
    </select>

    for(var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn 
                 @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info") 
                 page-selection"
                 href="/search/@ProductService.LastSearchText/@broj/@i">@i</a>
    }
}

@code {
    protected int broj;
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private void HandleSelectChange(ChangeEventArgs e)
    {
        broj = Convert.ToInt32(e.Value);
        ProductService.SearchProducts(ProductService.LastSearchText, broj, 1);
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Cena se krece vec od ${minPrice}";
    }
}
