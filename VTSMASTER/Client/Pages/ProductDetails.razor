@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
	<span id="ttestt">@message</span>
}
else
{
	<div class="media">
		<div class="media-img-wrapper">
			@if (!string.IsNullOrEmpty(product.ImageUrl))
			{
				<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
			}
			else
			{
				<MudCarousel Class="mud-width-full" ItemsSource="@product.Image" Style="height: 200px;">
					<ItemTemplate>
						<MudImage Src="@context.Data"></MudImage>
					</ItemTemplate>
				</MudCarousel>
			}
		</div>
		<div class="media-body">
			<h2 class="mb-0" id="dodatak2">@product.Title</h2>
			<p>@konvertovano</p>
			@if(product.Variants != null && product.Variants.Count > 1)
			{
				<div>
					<select class="form-select" @bind="currentTypeId">
						@foreach (var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
						}
					</select>
				</div>
			}
			@if(GetSelectedVariant() != null)
			{
				@if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
				{
					<h6 class="text-muted original-price">
						$@GetSelectedVariant().OriginalPrice
					</h6>
				}
				<h4 class="price">$@GetSelectedVariant().Price</h4>
			}
			<button class="btn btn-primary" @onclick="AddToCart">
				<i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Додај у Корпу
			</button>
		</div>
	</div>
}

@code {
	private Product? product = null;
	private string message = string.Empty;
	MarkupString konvertovano;

	private int currentTypeId = 1;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		message = "Loading Product...";
		var result = await ProductService.GetProduct(Id);
		if (!result.Success)
		{
			message = result.Message;
		}
		else
		{
			product = result.Data;
			if(product.Variants.Count > 0)
			{
				currentTypeId = product.Variants[0].ProductTypeId;
				string zakonvertovanje = product.Description.ToString();
				konvertovano = new MarkupString(zakonvertovanje);
			}
		}
	}
	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}

	private async Task AddToCart()
	{
		var productVariant = GetSelectedVariant();
		var cartItem = new CartItem
			{
				ProductId = productVariant.ProductId,
				ProductTypeId = productVariant.ProductTypeId
			};

		await CartService.AddToCart(cartItem);
	}
}
